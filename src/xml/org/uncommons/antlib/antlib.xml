<?xml version="1.0"?>
<!-- =========================================================================
  Copyright 2008-2009 Daniel W. Dyer

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
========================================================================== -->
<antlib xmlns:current="ant:current" xmlns:maven="urn:maven-artifact-ant">

  <taskdef name="once" classname="org.uncommons.antlib.tasks.Once" />
  <taskdef name="gzip" classname="org.uncommons.antlib.tasks.GZip" />
  <taskdef name="docbook" classname="org.uncommons.antlib.tasks.docbook.DocBook" />

  <macrodef name="defaults">
    <sequential>
      <current:once property="uncommons-antlib.defaults">
        <!-- The directory under which each of the modules directories are found. -->
        <property name="modules.dir" location="." />
        <!-- Per-module locations. -->
        <property name="src.dir" value="src" />
        <property name="java.dir" value="${src.dir}/java" />
        <property name="build.dir" value="build"/>
        <property name="classes.dir" value="${build.dir}/classes" />
        <property name="generated.dir" value="${build.dir}/generated" />
        <property name="lib.dir" value="lib"/>
        <property name="docs.dir" value="docs"/>
        <property name="coverage.dir" value="${docs.dir}/coverage" />
        <property name="test-results.dir" value="${docs.dir}/test-results" />
        <property name="temp.dir" value="temp" />
      </current:once>
    </sequential>
  </macrodef>

  
  <!-- This macro deletes all build artifacts from a module. -->
  <macrodef name="clean">
    <attribute name="module"/>
    <sequential>
      <current:defaults />
      <delete dir="${modules.dir}/@{module}/${build.dir}"/>
    </sequential>
  </macrodef>

  
  <!-- This macro compiles one source tree (i.e. the main source tree
       or the unit test source tree) of a given module. -->
  <macrodef name="compile.tree">
    <attribute name="module"/>
    <attribute name="tree"/>
    <attribute name="source"/>
    <attribute name="target"/>
    <element name="treeclasspath" optional="true"/>
    <sequential>
      <current:defaults />
      <mkdir dir="${modules.dir}/@{module}/${classes.dir}/@{tree}" />
      <!-- If there is no generated code to compile, we still need the directory to
           look at. -->
      <mkdir dir="${modules.dir}/@{module}/${generated.dir}/@{tree}" />
      <javac destdir="${modules.dir}/@{module}/${classes.dir}/@{tree}"
             debug="on"
             deprecation="on"
             optimize="on"
             source="@{source}"
             target="@{target}"
             srcdir="${modules.dir}/@{module}/${java.dir}/@{tree}:${modules.dir}/@{module}/${generated.dir}/@{tree}">
        <classpath>
          <treeclasspath/>
        </classpath>
        <compilerarg value="-Xlint:unchecked" />
      </javac>
    </sequential>
  </macrodef>


  <!-- This macro compiles all source (including unit tests) for a
       single module.  -->
  <macrodef name="compile">
    <attribute name="module"/>
    <attribute name="source" default="1.5"/>
    <attribute name="target" default="1.5"/>
    <sequential>
      <current:defaults />

      <path id="moduleclasspath">
        <!-- Module-specific libraries (if any). -->
        <fileset dir="${modules.dir}/@{module}/${lib.dir}"
                 includes="**/*.jar"
                 erroronmissingdir="false" />
        <!-- Global project libraries. -->
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <!-- Other modules. -->
        <fileset dir="${modules.dir}" includes="*/${build.dir}/*.jar"/>
      </path>

      <current:compile.tree module="@{module}"
                            tree="main"
                            source="@{source}"
                            target="@{target}">
        <treeclasspath>
          <path refid="moduleclasspath" />
        </treeclasspath>
      </current:compile.tree>
      <current:compile.tree module="@{module}"
                            tree="test"
                            source="@{source}"
                            target="@{target}">
        <treeclasspath>
          <!-- Add the main classes to the classpath for unit test compilation. -->
          <path location="${modules.dir}/@{module}/${classes.dir}/main" />
          <path refid="moduleclasspath" />
        </treeclasspath>
      </current:compile.tree>
    </sequential>
  </macrodef>

  
  <!-- This macro builds a JAR file for a module, containing all of
       the classes in the main source group for the module
       (i.e. unit test classes are excluded).  The JAR file name is
       derived from the module name (unless over-ridden). -->
  <macrodef name="jar">
    <attribute name="module"/>
    <attribute name="jarfile" default="@{module}.jar" description="JAR file name"/>
    <attribute name="classpath" default="" description="Manifest class path"/>
    <attribute name="mainclass" default="" description="Manifest main class"/>
    <element name="additionalcontents" optional="true"/>
    <sequential>
      <current:defaults />
      <jar destfile="${modules.dir}/@{module}/${build.dir}/@{jarfile}">
        <fileset dir="${modules.dir}/@{module}/${classes.dir}/main"/>
        <fileset dir="${modules.dir}/@{module}/${java.dir}/resources" erroronmissingdir="false" />
        <manifest>
          <attribute name="Class-Path" value="@{classpath}"/>
          <attribute name="Main-Class" value="@{mainclass}"/>
        </manifest>
        <additionalcontents/>
      </jar>
    </sequential>
  </macrodef>


  <!-- This macro builds a JAR file containing a module's source code
       (excluding tests).  The JAR file name is derived from the module name
       (unless over-ridden). -->
  <macrodef name="source">
    <attribute name="module"/>
    <attribute name="tree" default="main" description="Source tree (e.g. 'main' or 'test') to package." /> 
    <attribute name="jarfile" default="@{module}-src.jar" description="Source JAR file name"/>
    <sequential>
      <current:defaults />
      <mkdir dir="${modules.dir}/@{module}/${build.dir}" />
      <jar destfile="${modules.dir}/@{module}/${build.dir}/@{jarfile}">
        <fileset dir="${modules.dir}/@{module}/${java.dir}/@{tree}"/>
      </jar>
    </sequential>
  </macrodef>


  <!-- Runs TestNG unit tests for all modules, generates a report using ReportNG and
       measures coverage with Cobertura. -->
  <macrodef name="test">
    <attribute name="suites" />
    <attribute name="title" default="Unit Test Report" />
    <attribute name="headless" default="false" />
    <attribute name="mincoverage" default="60" />

    <sequential>
      <mkdir dir="${temp.dir}/originals" />
      
      <path id="test.path">
        <dirset dir="." includes="**/${classes.dir}/test" />
        <fileset dir="${temp.dir}" includes="*.jar"/>
        <fileset dir="." includes="**/${lib.dir}/**/*.jar"/>
      </path>

      <taskdef resource="tasks.properties" classpathref="test.path" />
      <taskdef resource="testngtasks" classpathref="test.path"/>

      <!-- Bytecode instrumentation to enable collection of test coverage data. -->
      <copy todir="${temp.dir}/originals" flatten="true">
        <!-- Instrument binary JARs, ignore source JARs. -->
        <fileset dir="." includes="**/${build.dir}/*.jar" excludes="**/${build.dir}/*-src.jar" />
      </copy>
      <cobertura-instrument todir="${temp.dir}"
                            datafile="${temp.dir}/cobertura.ser">
        <fileset dir="${temp.dir}/originals" includes="*.jar"/>
      </cobertura-instrument>

      <!-- Run the unit tests on the instrumented classes. -->
      <mkdir dir="${test-results.dir}" />

      <testng classpathref="test.path"
              outputdir="${test-results.dir}"
              haltonfailure="false"
              useDefaultListeners="false"
              listeners="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter">
        <xmlfileset dir="." includes="@{suites}"/>
        <sysproperty key="java.awt.headless" value="@{headless}" />
        <sysproperty key="net.sourceforge.cobertura.datafile"
                     file="${temp.dir}/cobertura.ser" />
        <sysproperty key="org.uncommons.reportng.title"
                     value="@{title}" />
        <sysproperty key="org.uncommons.reportng.coverage-report"
                     value="../../coverage/index.html" />
      </testng>
      <delete file="velocity.log" />

      <!-- Generate the HTML coverage report. -->
      <mkdir dir="${coverage.dir}" />
      <cobertura-report format="html"
                        destdir="${coverage.dir}"
                        datafile="${temp.dir}/cobertura.ser">
        <dirset dir="." includes="**/${java.dir}/main" />
      </cobertura-report>
      <!-- Generate an XML coverage report so that Hudson can graph trends. -->
      <cobertura-report format="xml"
                        destdir="${coverage.dir}"
                        datafile="${temp.dir}/cobertura.ser">
        <dirset dir="." includes="**/${java.dir}/main" />
      </cobertura-report>

      <!-- If the coverage is poor, fail. -->
      <cobertura-check totallinerate="@{mincoverage}"
                       totalbranchrate="@{mincoverage}"
                       datafile="${temp.dir}/cobertura.ser"/>

      <delete dir="${temp.dir}" />
    </sequential>
  </macrodef>

  <!-- Builds the module POM file and source JARs required by Maven and
       then deploys the whole lot to a Maven repository. -->
  <macrodef name="maven-deploy">
    <attribute name="module"/>
    <attribute name="version"/>
    <attribute name="repository" default="svn:https://maven2-repository.dev.java.net/svn/maven2-repository/trunk/repository/"/>
    <attribute name="username" />
    <attribute name="password" />

    <sequential>
      <current:defaults />

      <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
          <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </classpath>
      </typedef>

      <!-- Create a copy of the module POM file with the version number populated. -->
      <copy file="${modules.dir}/@{module}/pom.xml"
            tofile="${modules.dir}/@{module}/${build.dir}/pom.xml">
        <filterset>
          <filter token="VERSION" value="@{version}"/>
        </filterset>
      </copy>
      <maven:pom id="@{module}.pom" file="${modules.dir}/@{module}/${build.dir}/pom.xml" />

      <!-- Create the POM properties file. -->
      <propertyfile file="${modules.dir}/@{module}/${build.dir}/pom.properties">
        <entry key="version" value="@{version}"/>
        <entry key="groupId" value="${@{module}.pom.groupId}"/>
        <entry key="artifactId" value="${@{module}.pom.artifactId}"/>
      </propertyfile>

      <!-- Insert the POM and properties file into the previously built module JAR file. -->
      <jar update="true" jarfile="${modules.dir}/@{module}/${build.dir}/${@{module}.pom.artifactId}-@{version}.jar">
        <zipfileset dir="${modules.dir}/@{module}/${build.dir}"
                    includes="pom.xml,pom.properties"
                    prefix="META-INF/maven/${@{module}.pom.groupId}/${@{module}.pom.artifactId}" />
      </jar>

      <!-- Create source JARs for the main code and the tests. -->
      <current:source module="@{module}" tree="main" jarfile="${@{module}.pom.artifactId}-@{version}-sources.jar"/>
      <current:source module="@{module}" tree="test" jarfile="${@{module}.pom.artifactId}-@{version}-test-sources.jar"/>

      <!-- Install the SVN transfer module (this is needed for the Java.net Maven repository). -->
      <maven:install-provider groupId="org.jvnet.wagon-svn" artifactId="wagon-svn" version="1.8">
        <remoteRepository url="http://download.java.net/maven/2/"/>
      </maven:install-provider>

      <maven:remoteRepository id="maven.repository" url="@{repository}">
        <authentication username="@{username}" password="@{password}"/>
      </maven:remoteRepository>

      <maven:deploy file="${modules.dir}/@{module}/${build.dir}/${@{module}.pom.artifactId}-@{version}.jar">
        <remoteRepository refid="maven.repository"/>
        <pom refid="@{module}.pom"/>
        <attach file="${modules.dir}/@{module}/${build.dir}/${@{module}.pom.artifactId}-@{version}-sources.jar"
                type="jar"
                classifier="sources"/>
        <attach file="${modules.dir}/@{module}/${build.dir}/${@{module}.pom.artifactId}-@{version}-test-sources.jar"
                type="jar"
                classifier="test-sources"/>
      </maven:deploy>
    </sequential>
  </macrodef>

</antlib>